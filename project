{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPtNgfB+gmiwhHcroZSw55b",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tomasfbouvier/Invariant_mass_data_analysis/blob/main/project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TaDegUIe2QSq"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns #visualisation\n",
        "import matplotlib.pyplot as plt #visualisation\n",
        "%matplotlib inline \n",
        "sns.set(color_codes=True)\n",
        "import tensorflow as tf\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9MiZqsC2Jq31"
      },
      "source": [
        "#Exploratory data analysis\n",
        "\n",
        "df= pd.read_csv('https://raw.githubusercontent.com/tomasfbouvier/Invariant_mass_data_analysis/main/dielectron.csv',header=0).dropna()\n",
        "print(df.info)\n",
        "print(df.keys())\n",
        "\n",
        "print(df.isnull().values.any())\n",
        "\n",
        "plt.figure(figsize=(20,10))\n",
        "c= df.corr()\n",
        "sns.heatmap(c,cmap=\"BrBG\",annot=True)\n",
        "c\n",
        "plt.figure()\n",
        "\n",
        "#   Remove irrelevant columns:\n",
        "df = df.drop(['Run', 'Event', 'px1 ', 'py1', 'pz1',  'eta1', 'phi1', 'Q1',\n",
        "        'px2', 'py2', 'pz2', 'eta2', 'phi2', 'Q2'], axis=1)\n",
        "#df.head(5)\n",
        "\n",
        "#   Remove duplicates\n",
        "df = df.drop_duplicates()\n",
        "\n",
        "print(df.count())\n",
        "sns.boxplot(x=df['E1'])\n",
        "\n",
        "Q1 = df.quantile(0.25)\n",
        "Q3 = df.quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "print(IQR)\n",
        "\n",
        "df = df[~((df < (Q1-3 * IQR)) |(df > (Q3 + 3 * IQR))).any(axis=1)] #Buscar una raz√≥n fisica para descartar estos datos\n",
        "df.shape\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AlGhMopbnDJv"
      },
      "source": [
        "df.hist()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 785
        },
        "id": "tXd7f6QxeM_b",
        "outputId": "db11c02c-c377-4d11-8f13-32b4ffe3ab99"
      },
      "source": [
        "# Finding the relations between the variables.\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>E1</th>\n",
              "      <th>pt1</th>\n",
              "      <th>E2</th>\n",
              "      <th>pt2</th>\n",
              "      <th>M</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>E1</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.687896</td>\n",
              "      <td>-0.238003</td>\n",
              "      <td>-0.209833</td>\n",
              "      <td>0.270821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pt1</th>\n",
              "      <td>0.687896</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.228352</td>\n",
              "      <td>-0.063832</td>\n",
              "      <td>0.432063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>E2</th>\n",
              "      <td>-0.238003</td>\n",
              "      <td>-0.228352</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.742501</td>\n",
              "      <td>0.310772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pt2</th>\n",
              "      <td>-0.209833</td>\n",
              "      <td>-0.063832</td>\n",
              "      <td>0.742501</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.428395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>M</th>\n",
              "      <td>0.270821</td>\n",
              "      <td>0.432063</td>\n",
              "      <td>0.310772</td>\n",
              "      <td>0.428395</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           E1       pt1        E2       pt2         M\n",
              "E1   1.000000  0.687896 -0.238003 -0.209833  0.270821\n",
              "pt1  0.687896  1.000000 -0.228352 -0.063832  0.432063\n",
              "E2  -0.238003 -0.228352  1.000000  0.742501  0.310772\n",
              "pt2 -0.209833 -0.063832  0.742501  1.000000  0.428395\n",
              "M    0.270821  0.432063  0.310772  0.428395  1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x720 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FDU9ec_ooH8T"
      },
      "source": [
        "split_size=0.9 # ratio training/overall\n",
        "\n",
        "size=df.shape[0]\n",
        "\n",
        "X=df.iloc(1)[:-1].values.copy()\n",
        "y= df.iloc(1)[-1].values.copy()\n",
        "\n",
        "print(y)\n",
        "X= (X -X.mean(axis=0).T[None,:])/X.std(axis=0).T[None,:]\n",
        "#X /= X.std(axis=0).T[None,:]\n",
        "\n",
        "print(np.mean(y))\n",
        "#y -= y.mean()\n",
        "#y /= y.std()\n",
        "\n",
        "\n",
        "X_train= X[:int(0.9*size)]\n",
        "y_train= y[:int(0.9*size)]\n",
        "\n",
        "X_test= X[int(0.9*size):]\n",
        "y_test= X[int(0.9*size):]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rIZ1VKBhitE-"
      },
      "source": [
        "# Plotting a scatter plot\n",
        "fig, ax = plt.subplots(figsize=(10,6))\n",
        "ax.scatter(abs(df['E2']), df['M'], s=0.01)\n",
        "ax.set_xlabel('E1')\n",
        "ax.set_ylabel('M')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zZmZyUBUuK0t",
        "outputId": "d94f12ee-0eac-4fd8-ac0d-f612813adfc4"
      },
      "source": [
        "print(y)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-0.82658825 -0.54556832  0.36470266 ... -0.67423004 -0.99863803\n",
            "  0.28848896]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u3kEhF-Fh1dy",
        "outputId": "7d8612a0-7080-480f-dd57-77c7b763cc7e"
      },
      "source": [
        "print(X_train.shape)\n",
        "print(X_test.shape)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(87837, 4)\n",
            "(9760, 4)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g1UZdcHtq7FR"
      },
      "source": [
        "input_shape= X_train.shape[1]\n",
        "\n",
        "NN_model = tf.keras.models.Sequential()\n",
        "\n",
        "# The Input Layer :\n",
        "NN_model.add(tf.keras.layers.Dense(128, kernel_initializer='normal',input_dim = X_train.shape[1], activation='relu', kernel_regularizer='l1'))\n",
        "\n",
        "# The Hidden Layers :\n",
        "NN_model.add(tf.keras.layers.Dense(256, kernel_initializer='normal',activation='relu'))\n",
        "NN_model.add(tf.keras.layers.Dropout(0.2))\n",
        "\n",
        "# The Output Layer :\n",
        "NN_model.add(tf.keras.layers.Dense(1, kernel_initializer='normal',activation='linear'))\n",
        "\n",
        "# Compile the network :\n",
        "NN_model.compile(loss='mean_absolute_error', optimizer='adam', metrics=['mean_absolute_error'])\n",
        "NN_model.summary()\n",
        "\n",
        "\n",
        "#model.evaluate(X_train, y_train)\n",
        "#model.evaluate(X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sQN4tlOssC2Q",
        "outputId": "849f2019-f4cd-4143-ce4c-8fed4830ae0b"
      },
      "source": [
        "history=NN_model.fit(X, y, epochs=10, batch_size=32, validation_split = 0.01)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "3020/3020 [==============================] - 8s 3ms/step - loss: 11.0701 - mean_absolute_error: 11.0701 - val_loss: 10.3229 - val_mean_absolute_error: 10.3229\n",
            "Epoch 2/10\n",
            "3020/3020 [==============================] - 8s 3ms/step - loss: 11.0656 - mean_absolute_error: 11.0656 - val_loss: 10.3212 - val_mean_absolute_error: 10.3212\n",
            "Epoch 3/10\n",
            "3020/3020 [==============================] - 8s 3ms/step - loss: 11.0492 - mean_absolute_error: 11.0492 - val_loss: 10.2230 - val_mean_absolute_error: 10.2230\n",
            "Epoch 4/10\n",
            "3020/3020 [==============================] - 8s 3ms/step - loss: 11.0344 - mean_absolute_error: 11.0344 - val_loss: 10.2344 - val_mean_absolute_error: 10.2344\n",
            "Epoch 5/10\n",
            "3020/3020 [==============================] - 8s 3ms/step - loss: 11.0331 - mean_absolute_error: 11.0331 - val_loss: 10.2722 - val_mean_absolute_error: 10.2722\n",
            "Epoch 6/10\n",
            "3020/3020 [==============================] - 9s 3ms/step - loss: 11.0227 - mean_absolute_error: 11.0227 - val_loss: 10.2118 - val_mean_absolute_error: 10.2118\n",
            "Epoch 7/10\n",
            "3020/3020 [==============================] - 8s 3ms/step - loss: 11.0287 - mean_absolute_error: 11.0287 - val_loss: 10.1780 - val_mean_absolute_error: 10.1780\n",
            "Epoch 8/10\n",
            "1509/3020 [=============>................] - ETA: 4s - loss: 10.9553 - mean_absolute_error: 10.9553"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "EuNoTgO-IolS",
        "outputId": "a3fe14b7-d28c-4f22-f20d-c112202e67b8"
      },
      "source": [
        "print(history.history.keys())\n",
        "\n",
        "plt.plot(history.history['mean_absolute_error'])\n",
        "plt.plot(history.history['val_mean_absolute_error'])\n",
        "plt.title('model mae')\n",
        "plt.ylabel('mean_absolute_error')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# summarize history for loss\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['loss', 'mean_absolute_error', 'val_loss', 'val_mean_absolute_error'])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H9ZOCTRAmerw"
      },
      "source": [
        "plt.hist(NN_model.predict(X_test))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AV5gJ5-DqqyZ"
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "reg = LinearRegression().fit(X_train, y_train)\n",
        "\n"
      ],
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T1riTG2prBBe",
        "outputId": "a28a6546-914a-4322-842b-be74b120158f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "reg.score(X_train, y_train)\n"
      ],
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4159039241289296"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    }
  ]
}